"""
TokenizeLocal Telegram Bot ‚Äî —Ñ–∏–Ω–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è
"""

import os
from typing import Dict
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    ContextTypes,
    MessageHandler,
    filters,
    CallbackQueryHandler
)
from blockchain.db_manager import DBManager
from blockchain.users import UserManager, UserAlreadyExists, InvalidEmail
from verification.api_client import FinancialAPIClient
from utils.logger import Logger

# –õ–æ–≥–≥–µ—Ä
logger = Logger("TokenizeLocalBot")

# –¢–æ–∫–µ–Ω—ã
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN", "")
CHECKO_API_KEY = os.getenv("CHECKO_API_KEY", "yCEWUepinagwBCn3")


class TelegramBotHandler:
    def __init__(self):
        self.checko_api_key = CHECKO_API_KEY
        self.user_states = {}

    def get_user_state(self, user_id: int) -> Dict:
        if user_id not in self.user_states:
            self.user_states[user_id] = {"role": None, "data": {}, "help_shown": False}
        return self.user_states[user_id]

    def get_help_text(self, role: str) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–¥—Å–∫–∞–∑–∫—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏"""
        if role == "company":
            return (
                "üíº –í—ã –≤ —Ä–µ–∂–∏–º–µ –∫–æ–º–ø–∞–Ω–∏–∏.\n\n"
                "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                "/issue_tokens ‚Äî –í—ã–ø—É—Å—Ç–∏—Ç—å —Ç–æ–∫–µ–Ω—ã\n"
                "/help ‚Äî –ü–æ–º–æ—â—å\n\n"
                "üí° –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞ ‚Äî –≤–≤–µ–¥–∏—Ç–µ /start"
            )
        else:
            return (
                "üë§ –í—ã –≤ —Ä–µ–∂–∏–º–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.\n\n"
                "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                "/register ‚Äî –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è\n"
                "/login ‚Äî –í—Ö–æ–¥\n"
                "/companies ‚Äî –°–ø–∏—Å–æ–∫ –∫–æ–º–ø–∞–Ω–∏–π\n"
                "/buy ‚Äî –ü–æ–∫—É–ø–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤\n"
                "/balance ‚Äî –ú–æ–π –±–∞–ª–∞–Ω—Å\n"
                "/dividends ‚Äî –ú–æ–∏ –≤—ã–ø–ª–∞—Ç—ã\n"
                "/help ‚Äî –ü–æ–º–æ—â—å\n\n"
                "üí° –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞ ‚Äî –≤–≤–µ–¥–∏—Ç–µ /start"
            )

    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ /start ‚Äî –≤—ã–±–æ—Ä —Ä–æ–ª–∏"""
        keyboard = [
            [InlineKeyboardButton("üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", callback_data="role_user")],
            [InlineKeyboardButton("üè¢ –ö–æ–º–ø–∞–Ω–∏—è", callback_data="role_company")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ TokenizeLocal!\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ä–æ–ª—å:",
            reply_markup=reply_markup
        )

        user_id = update.effective_user.id
        user_state = self.get_user_state(user_id)
        user_state["role"] = None
        user_state["help_shown"] = False

    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ /help ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—É—é –ø–æ–¥—Å–∫–∞–∑–∫—É"""
        user_id = update.effective_user.id
        user_state = self.get_user_state(user_id)
        role = user_state.get("role", "user")
        help_text = self.get_help_text(role)
        await update.message.reply_text(help_text, parse_mode=None)

    async def handle_role_selection(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–æ–ª–∏"""
        query = update.callback_query
        await query.answer()
        user_id = query.from_user.id
        user_state = self.get_user_state(user_id)

        if query.data == "role_user":
            user_state["role"] = "user"
            await query.edit_message_text("‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏ —Ä–µ–∂–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        elif query.data == "role_company":
            user_state["role"] = "company"
            await query.edit_message_text("‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏ —Ä–µ–∂–∏–º –∫–æ–º–ø–∞–Ω–∏–∏.")
        else:
            await query.edit_message_text("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ä–æ–ª—å.")
            return

        # ‚úÖ –í—Å–µ–≥–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É
        help_text = self.get_help_text(user_state["role"])
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=help_text,
            parse_mode=None  # üî• –ö–ª—é—á–µ–≤–æ–µ: —É–±—Ä–∞–Ω Markdown
        )
        user_state["help_shown"] = True

    async def register_user(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        user_state = self.get_user_state(user_id)
        if user_state["role"] != "user":
            await update.message.reply_text("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
            return
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∏–º—è, email –∏ –ø–∞—Ä–æ–ª—å —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª\n–ü—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω user@example.com 1234")
        user_state["awaiting_register"] = True

    async def login_user(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        user_state = self.get_user_state(user_id)
        if user_state["role"] != "user":
            await update.message.reply_text("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
            return
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ email –∏ –ø–∞—Ä–æ–ª—å —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª")
        user_state["awaiting_login"] = True

    async def issue_tokens(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        user_state = self.get_user_state(user_id)
        if user_state["role"] != "company":
            await update.message.reply_text("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–π.")
            return
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –ò–ù–ù –∫–æ–º–ø–∞–Ω–∏–∏ (10 –∏–ª–∏ 12 —Ü–∏—Ñ—Ä):")
        user_state["awaiting_inn"] = True

    async def process_inn_input(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        user_state = self.get_user_state(user_id)
        inn = update.message.text.strip()
        if not (len(inn) in (10, 12) and inn.isdigit()):
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ò–ù–ù.")
            return
        try:
            api_client = FinancialAPIClient(self.checko_api_key)
            company_info = api_client.get_company_info(inn)
            user_state["company_data"] = {"inn": inn, "name": company_info["name"]}
            await update.message.reply_text(f"‚úÖ {company_info['name']}\n–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤:")
            user_state["awaiting_token_amount"] = True
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        finally:
            user_state.pop("awaiting_inn", None)

    async def process_token_amount(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        user_state = self.get_user_state(user_id)
        amount_text = update.message.text.strip()
        try:
            amount = float(amount_text)
            if amount <= 0:
                raise ValueError("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º")
            company_data = user_state.get("company_data")
            if not company_data:
                raise ValueError("–î–∞–Ω–Ω—ã–µ –∫–æ–º–ø–∞–Ω–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            db = DBManager()
            db.register_or_update_business(company_data["inn"], company_data["name"])
            db.issue_tokens(company_data["inn"], amount)
            await update.message.reply_text(f"‚úÖ –í—ã–ø—É—â–µ–Ω–æ {amount} —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è {company_data['name']}!")
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        finally:
            user_state.pop("awaiting_token_amount", None)
            user_state.pop("company_data", None)

    async def show_companies(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        db = DBManager()
        companies = db.get_all_issuances()
        if not companies:
            await update.message.reply_text("–ù–µ—Ç –∫–æ–º–ø–∞–Ω–∏–π.")
            return
        response = "üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–ø–∞–Ω–∏–∏:\n"
        for idx, (inn, name, amount, _) in enumerate(companies):
            response += f"{idx+1}. {name} ‚Äî {amount or 0} —Ç–æ–∫–µ–Ω–æ–≤\n"
        await update.message.reply_text(response)

    async def show_balance(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        email = f"{user_id}@telegram.local"
        db = DBManager()
        user_tokens = db.get_user_tokens(email)
        if not user_tokens:
            await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç —Ç–æ–∫–µ–Ω–æ–≤.")
            return
        response = "üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å:\n"
        for inn, name, amount in user_tokens:
            response += f"- {name}: {amount} —Ç–æ–∫–µ–Ω–æ–≤\n"
        await update.message.reply_text(response)

    async def buy_tokens(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        user_state = self.get_user_state(user_id)
        if user_state["role"] != "user":
            await update.message.reply_text("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
            return
        db = DBManager()
        companies = db.get_all_issuances()
        if not companies:
            await update.message.reply_text("‚ùå –ù–µ—Ç –∫–æ–º–ø–∞–Ω–∏–π.")
            return
        response = "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–ø–∞–Ω–∏—é:\n"
        for idx, (inn, name, amount, _) in enumerate(companies):
            response += f"{idx+1}. {name} ({amount or 0})\n"
        response += "\n–í–≤–µ–¥–∏—Ç–µ: –ù–û–ú–ï–† –ö–û–õ–ò–ß–ï–°–¢–í–û\n–ü—Ä–∏–º–µ—Ä: 1 10"
        await update.message.reply_text(response)
        user_state["awaiting_purchase"] = True

    async def handle_purchase(self, update: Update, context: ContextTypes.DEFAULT_TYPE, user_id: int, text: str):
        user_state = self.get_user_state(user_id)
        try:
            parts = text.split()
            if len(parts) != 2:
                raise ValueError("–í–≤–µ–¥–∏—Ç–µ –¥–≤–∞ —á–∏—Å–ª–∞")
            company_num = int(parts[0]); amount = float(parts[1])
            if company_num <= 0 or amount <= 0:
                raise ValueError("–ß–∏—Å–ª–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º–∏")
            db = DBManager()
            companies = db.get_all_issuances()
            if company_num > len(companies):
                raise ValueError("–ù–µ—Ç —Ç–∞–∫–æ–π –∫–æ–º–ø–∞–Ω–∏–∏")
            inn, name, available, _ = companies[company_num - 1]
            if available is None or amount > available:
                raise ValueError(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤. –î–æ—Å—Ç—É–ø–Ω–æ: {available or 0}")
            email = f"{user_id}@telegram.local"
            db.issue_tokens(inn, -amount)
            db.add_user_tokens(email, inn, amount)
            current = next((t[2] for t in db.get_user_tokens(email) if t[0] == inn), 0)
            await update.message.reply_text(f"‚úÖ –ö—É–ø–ª–µ–Ω–æ {amount} —Ç–æ–∫–µ–Ω–æ–≤ {name}!\n–ë–∞–ª–∞–Ω—Å: {current}")
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        finally:
            user_state.pop("awaiting_purchase", None)

    async def show_dividends(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        email = f"{user_id}@telegram.local"
        db = DBManager()
        cursor = db.conn.cursor()
        cursor.execute("""
            SELECT d.business_inn, b.name, d.distribution_date, d.dividend_pool, d.token_price
            FROM dividend_history d
            JOIN businesses b ON d.business_inn = b.inn
            JOIN user_tokens u ON d.business_inn = u.business_inn
            WHERE u.email = ?
            ORDER BY d.distribution_date DESC
            LIMIT 5
        """, (email,))
        rows = cursor.fetchall()
        if not rows:
            await update.message.reply_text("–£ –≤–∞—Å –Ω–µ –±—ã–ª–æ –≤—ã–ø–ª–∞—Ç.")
            return
        response = "üìà –í–∞—à–∏ –≤—ã–ø–ª–∞—Ç—ã:\n\n"
        for inn, name, date, pool, price in rows:
            tokens = next((t[2] for t in db.get_user_tokens(email) if t[0] == inn), 0)
            if tokens > 0:
                dividend = (tokens / db.get_token_stats(inn).get("total_issued", 1)) * pool
                response += f"üè¢ {name}\nüìÖ {date[:10]}\nüí∏ {dividend:.2f}$\n\n"
        await update.message.reply_text(response)

    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        user_state = self.get_user_state(user_id)
        text = update.message.text.strip()
        try:
            if user_state.get("awaiting_register"):
                parts = text.split()
                if len(parts) < 3:
                    await update.message.reply_text("‚ùå –ù—É–∂–Ω–æ: –∏–º—è email –ø–∞—Ä–æ–ª—å")
                    return
                password = parts[-1]; email = parts[-2]; name = " ".join(parts[:-2])
                if "@" not in email:
                    await update.message.reply_text("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email")
                    return
                user_manager = UserManager()
                try:
                    user_manager.register_user(name, email, password)
                    await update.message.reply_text(f"‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞, {name}!")
                    await self.show_companies(update, context)
                except UserAlreadyExists:
                    await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
                except InvalidEmail:
                    await update.message.reply_text("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email.")
                finally:
                    user_state.pop("awaiting_register", None)

            elif user_state.get("awaiting_login"):
                parts = text.split()
                if len(parts) != 2:
                    await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ email –∏ –ø–∞—Ä–æ–ª—å")
                    return
                email, password = parts
                user_manager = UserManager()
                if user_manager.authenticate_user(email, password):
                    await update.message.reply_text("‚úÖ –í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω!")
                    await self.show_companies(update, context)
                else:
                    await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å.")
                user_state.pop("awaiting_login", None)

            elif user_state.get("awaiting_inn"):
                await self.process_inn_input(update, context)
            elif user_state.get("awaiting_token_amount"):
                await self.process_token_amount(update, context)
            elif user_state.get("awaiting_purchase"):
                await self.handle_purchase(update, context, user_id, text)

        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

    def setup_handlers(self, application):
        application.add_handler(CommandHandler("start", self.start))
        application.add_handler(CommandHandler("help", self.help_command))
        application.add_handler(CallbackQueryHandler(self.handle_role_selection))
        application.add_handler(CommandHandler("register", self.register_user))
        application.add_handler(CommandHandler("login", self.login_user))
        application.add_handler(CommandHandler("issue_tokens", self.issue_tokens))
        application.add_handler(CommandHandler("companies", self.show_companies))
        application.add_handler(CommandHandler("buy", self.buy_tokens))
        application.add_handler(CommandHandler("balance", self.show_balance))
        application.add_handler(CommandHandler("dividends", self.show_dividends))
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))


def run_bot():
    handler = TelegramBotHandler()
    application = ApplicationBuilder().token(TELEGRAM_BOT_TOKEN).build()
    handler.setup_handlers(application)
    logger.log("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    application.run_polling()


if __name__ == "__main__":

    run_bot()
