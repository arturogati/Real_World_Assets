"""
TokenizeLocal Console App ‚Äî –∑–µ—Ä–∫–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è Telegram-–±–æ—Ç–∞
"""

import os
from blockchain.db_manager import DBManager
from blockchain.users import UserManager, UserAlreadyExists, InvalidEmail
from verification.api_client import FinancialAPIClient
from utils.logger import Logger

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
logger = Logger("TokenizeLocalConsole")
checko_api_key = "yCEWUepinagwBCn3"  # –∏–ª–∏ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑ .env
db = DBManager()
user_manager = UserManager()

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
current_user_email = None
current_role = None  # "user" –∏–ª–∏ "company"


def get_help_text(role: str):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–¥—Å–∫–∞–∑–∫—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏"""
    if role == "company":
        return """
üíº –í—ã –≤ —Ä–µ–∂–∏–º–µ –∫–æ–º–ø–∞–Ω–∏–∏.

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
4. –í—ã–ø—É—Å—Ç–∏—Ç—å —Ç–æ–∫–µ–Ω—ã
8. –ü–æ–º–æ—â—å
9. –í—ã—Ö–æ–¥

üí° –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞ ‚Äî –≤–≤–µ–¥–∏—Ç–µ 0
        """.strip()
    else:
        return """
üë§ –í—ã –≤ —Ä–µ–∂–∏–º–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
1. –í–æ–π—Ç–∏ –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
2. –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
5. –°–ø–∏—Å–æ–∫ –∫–æ–º–ø–∞–Ω–∏–π
6. –ö—É–ø–∏—Ç—å —Ç–æ–∫–µ–Ω—ã
7. –ú–æ–π –±–∞–ª–∞–Ω—Å
8. –ü–æ–º–æ—â—å
9. –í—ã—Ö–æ–¥

üí° –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞ ‚Äî –≤–≤–µ–¥–∏—Ç–µ 0
        """.strip()


def show_help():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–¥—Å–∫–∞–∑–∫—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏"""
    role = current_role or "user"
    print(get_help_text(role))


def reset_session():
    """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å–µ—Å—Å–∏—é (–∞–Ω–∞–ª–æ–≥ /start)"""
    global current_user_email, current_role
    current_user_email = None
    current_role = None
    print("\nüîÑ –°–µ—Å—Å–∏—è —Å–±—Ä–æ—à–µ–Ω–∞. –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞.")


def login_user():
    """–í—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    global current_user_email, current_role
    print("\nüîê –í—Ö–æ–¥ –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
    email = input("–í–≤–µ–¥–∏—Ç–µ email: ").strip()
    password = input("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å: ").strip()

    if user_manager.authenticate_user(email, password):
        current_user_email = email
        current_role = "user"
        print(f"[INFO] –í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ –¥–ª—è {email}")
        show_help()
    else:
        print("[ERROR] –ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å.")


def register_user():
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    global current_user_email, current_role
    print("\nüìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    name = input("–ò–º—è: ").strip()
    email = input("Email: ").strip()
    password = input("–ü–∞—Ä–æ–ª—å: ").strip()

    try:
        user_manager.register_user(name, email, password)
        current_user_email = email
        current_role = "user"
        print(f"[INFO] –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {name}!")
        show_help()
    except UserAlreadyExists:
        print("[ERROR] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
    except InvalidEmail:
        print("[ERROR] –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email.")
    except Exception as e:
        print(f"[ERROR] –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {e}")


def company_mode():
    """–†–µ–∂–∏–º –∫–æ–º–ø–∞–Ω–∏–∏: –≤—ã–ø—É—Å–∫ —Ç–æ–∫–µ–Ω–æ–≤"""
    print("\nüè¢ –†–µ–∂–∏–º –∫–æ–º–ø–∞–Ω–∏–∏")
    inn = input("–í–≤–µ–¥–∏—Ç–µ –ò–ù–ù –∫–æ–º–ø–∞–Ω–∏–∏: ").strip()

    if len(inn) not in (10, 12) or not inn.isdigit():
        print("[ERROR] –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ò–ù–ù. –î–æ–ª–∂–Ω–æ –±—ã—Ç—å 10 –∏–ª–∏ 12 —Ü–∏—Ñ—Ä.")
        return

    try:
        api_client = FinancialAPIClient(checko_api_key)
        company_info = api_client.get_company_info(inn)

        if company_info.get("status") != "–î–µ–π—Å—Ç–≤—É–µ—Ç":
            print(f"[ERROR] –ö–æ–º–ø–∞–Ω–∏—è –Ω–µ –¥–µ–π—Å—Ç–≤—É–µ—Ç. –°—Ç–∞—Ç—É—Å: {company_info['status']}")
            return

        print(f"[INFO] –ö–æ–º–ø–∞–Ω–∏—è –Ω–∞–π–¥–µ–Ω–∞: {company_info['name']}")

        amount_input = input("–°–∫–æ–ª—å–∫–æ —Ç–æ–∫–µ–Ω–æ–≤ –≤—ã–ø—É—Å—Ç–∏—Ç—å? ").strip()
        amount = float(amount_input)
        if amount <= 0:
            raise ValueError("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º.")

        db.register_or_update_business(inn, company_info["name"])
        db.issue_tokens(inn, amount)
        print(f"[INFO] ‚úÖ –£—Å–ø–µ—à–Ω–æ –≤—ã–ø—É—â–µ–Ω–æ {amount} —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏ '{company_info['name']}'")

    except Exception as e:
        print(f"[ERROR] –û—à–∏–±–∫–∞ –≤—ã–ø—É—Å–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤: {e}")


def show_companies():
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–ø–∞–Ω–∏–π"""
    print("\nüìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–ø–∞–Ω–∏–∏:")
    companies = db.get_all_issuances()
    if not companies:
        print("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–ø–∞–Ω–∏–π.")
        return

    for idx, (inn, name, amount, _) in enumerate(companies):
        print(f"{idx+1}. {name} (–ò–ù–ù: {inn}) ‚Äî –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤: {amount or 0}")


def buy_tokens():
    """–ü–æ–∫—É–ø–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"""
    if not current_user_email:
        print("[ERROR] –°–Ω–∞—á–∞–ª–∞ –≤–æ–π–¥–∏—Ç–µ –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.")
        return

    print("\nüõí –ü–æ–∫—É–ø–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤")
    show_companies()
    choice = input("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–æ–º–ø–∞–Ω–∏–∏: ").strip()
    amount_input = input("–°–∫–æ–ª—å–∫–æ —Ç–æ–∫–µ–Ω–æ–≤ —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å? ").strip()

    try:
        company_num = int(choice)
        amount = float(amount_input)

        if company_num <= 0 or amount <= 0:
            raise ValueError("–ß–∏—Å–ª–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º–∏")

        companies = db.get_all_issuances()
        if company_num > len(companies):
            raise ValueError("–ö–æ–º–ø–∞–Ω–∏–∏ —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")

        inn, name, available, _ = companies[company_num - 1]
        if available is None or amount > available:
            raise ValueError(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤. –î–æ—Å—Ç—É–ø–Ω–æ: {available or 0}")

        db.issue_tokens(inn, -amount)
        db.add_user_tokens(email=current_user_email, business_inn=inn, amount=amount)

        user_tokens = db.get_user_tokens(current_user_email)
        current_amount = next((t[2] for t in user_tokens if t[0] == inn), 0)

        print(f"\n‚úÖ –£—Å–ø–µ—à–Ω–æ –∫—É–ø–ª–µ–Ω–æ {amount} —Ç–æ–∫–µ–Ω–æ–≤ –∫–æ–º–ø–∞–Ω–∏–∏ '{name}'")
        print(f"–í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {current_amount} —Ç–æ–∫–µ–Ω–æ–≤")

    except ValueError as e:
        print(f"[ERROR] –û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞: {e}")
    except Exception as e:
        print(f"[ERROR] –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")


def show_balance():
    """–ü–æ–∫–∞–∑–∞—Ç—å –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if not current_user_email:
        print("[ERROR] –°–Ω–∞—á–∞–ª–∞ –≤–æ–π–¥–∏—Ç–µ –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.")
        return

    print("\nüí∞ –í–∞—à –±–∞–ª–∞–Ω—Å:")
    tokens = db.get_user_tokens(current_user_email)
    if not tokens:
        print("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ç–æ–∫–µ–Ω–æ–≤.")
        return
    for row in tokens:
        inn, name, token_count = row
        print(f"- {name}: {token_count} —Ç–æ–∫–µ–Ω–æ–≤")


def run_full_demo():
    """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    print("=== üåê TokenizeLocal Console App ===")
    show_help()

    while True:
        try:
            choice = input("\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ (–≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä): ").strip()

            if choice == "0":
                reset_session()
                show_help()

            elif choice == "1":
                login_user()

            elif choice == "2":
                register_user()

            elif choice == "3":
                global current_role
                current_role = "company"
                print("[INFO] –í—ã –≤—ã–±—Ä–∞–ª–∏ —Ä–µ–∂–∏–º –∫–æ–º–ø–∞–Ω–∏–∏.")
                show_help()

            elif choice == "4":
                if current_role == "company":
                    company_mode()
                else:
                    print("[ERROR] –í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å –∫–æ–º–ø–∞–Ω–∏–∏ (–∫–æ–º–∞–Ω–¥–∞ 3).")

            elif choice == "5":
                show_companies()

            elif choice == "6":
                buy_tokens()

            elif choice == "7":
                show_balance()

            elif choice == "8":
                show_help()

            elif choice == "9":
                print("üëã –í—ã—Ö–æ–¥ –∏–∑ TokenizeLocal...")
                break

            else:
                print("[ERROR] –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –í–≤–µ–¥–∏—Ç–µ 0-9.")

        except KeyboardInterrupt:
            print("\n\nüëã –ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
            break
        except Exception as e:
            print(f"[CRITICAL] –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")


if __name__ == "__main__":
    run_full_demo()
